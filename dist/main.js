!function(t){function e(e){for(var r,s,i=e[0],u=e[1],c=e[2],l=0,f=[];l<i.length;l++)s=i[l],Object.prototype.hasOwnProperty.call(n,s)&&n[s]&&f.push(n[s][0]),n[s]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(t[r]=u[r]);for(p&&p(e);f.length;)f.shift()();return a.push.apply(a,c||[]),o()}function o(){for(var t,e=0;e<a.length;e++){for(var o=a[e],r=!0,i=1;i<o.length;i++){var u=o[i];0!==n[u]&&(r=!1)}r&&(a.splice(e--,1),t=s(s.s=o[0]))}return t}var r={},n={main:0},a=[];function s(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=r,s.d=function(t,e,o){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(o,r,function(e){return t[e]}.bind(null,r));return o},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="";var i=window.webpackJsonp=window.webpackJsonp||[],u=i.push.bind(i);i.push=e,i=i.slice();for(var c=0;c<i.length;c++)e(i[c]);var p=u;a.push([1,"common"]),o()}([function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=o(10),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.create=function(){this.uiDemoSelector=new a.default(this.game,this.game.world)},e.prototype.render=function(){this.game.debug.text("FPS: "+this.game.time.fps||!1,40,40,"#00ff00")},e}(Phaser.State);e.default=s},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),window.PIXI=o(2),window.p2=o(3),window.Phaser=o(4);var r=o(6),n=o(7),a=o(8),s=o(9),i=o(12),u=o(14),c=Phaser.AUTO,p=new Phaser.Game(1280,720,c,"");p.state.add("boot",r.default),p.state.add("preload",n.default),p.state.add("title",a.default),p.state.add("spritesDemo",s.default),p.state.add("inlineImageDemo",i.default),p.state.add("particlesDemo",u.default),p.state.start("boot")},,,,,function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.preload=function(){this.load.image("preloadSprite","assets/images/preloadSprite.png")},e.prototype.create=function(){this.game.input.maxPointers=1,this.game.stage.backgroundColor="#4D4D4D",this.game.stage.smoothed=!0,this.game.scale.scaleMode=Phaser.ScaleManager.SHOW_ALL,this.game.scale.fullScreenScaleMode=Phaser.ScaleManager.SHOW_ALL,this.game.scale.pageAlignHorizontally=!0,this.game.scale.pageAlignVertically=!0,this.game.scale.refresh(),this.game.time.advancedTiming=!0,this.game.state.start("preload")},e}(Phaser.State);e.default=a},function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.preload=function(){this.preloadSprite=this.add.sprite(this.game.width/2,this.game.height/2,"preloadSprite"),this.preloadSprite.anchor.setTo(.5,.5),this.load.onLoadComplete.addOnce(this.beginGame,this),this.load.setPreloadSprite(this.preloadSprite),this.preloadImages(),this.preloadSounds(),this.preloadFonts()},e.prototype.preloadImages=function(){this.load.image("startButton",e.assetsUri.IMAGES+"startButton.png"),this.load.image("textButtonBackground",e.assetsUri.IMAGES+"textButtonBackground.png"),this.load.spritesheet("cards",e.assetsUri.IMAGES+"cards.png",81,117,58),this.load.spritesheet("fire",e.assetsUri.IMAGES+"fire1_64.png",64,64)},e.prototype.preloadSounds=function(){this.load.audio("click",[e.assetsUri.SOUNDS+"click.wav"])},e.prototype.preloadFonts=function(){this.load.bitmapFont("desyrelMod",e.assetsUri.FONTS+"desyrelMod.png",e.assetsUri.FONTS+"desyrelMod.xml")},e.prototype.beginGame=function(){this.game.state.start("title")},e.assetsUri={IMAGES:"assets/images/",SOUNDS:"assets/sounds/",FONTS:"assets/fonts/"},e}(Phaser.State);e.default=a},function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.create=function(){var t=this;this.startButton=this.game.add.sprite(this.game.world.centerX,this.game.world.centerY,"startButton"),this.startButton.anchor.setTo(.5,.5),this.startButton.inputEnabled=!0,this.startButton.input.useHandCursor=!0,this.startButton.events.onInputUp.add((function(){t.game.scale.startFullScreen(!1),t.game.state.start("spritesDemo")}))},e.prototype.update=function(){},e}(Phaser.State);e.default=a},function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.cards=[],e}return n(e,t),e.prototype.create=function(){for(t.prototype.create.call(this);this.cards.length<e.SPRITE_COUNT;){var o=this.game.add.sprite(this.game.world.centerX+e.LEFT_STACK_OFFSET.x,this.game.world.centerY+e.LEFT_STACK_OFFSET.y,"cards",Math.floor(Math.random()*e.SPRITE_OPTIONS));o.anchor.setTo(.5,.5),o.rotation=.5*Math.random()-.25,this.cards.push(o)}this.game.time.events.add(e.START_TIME,this.sendCardsRight,this)},e.prototype.shutdown=function(){this.cards=[]},e.prototype.sendCardsRight=function(){var t=this;this.game.time.fps<50&&(this.game.antialias=!1),this.cards.reverse().forEach((function(o,r){t.game.add.tween(o).to({x:t.game.width/2+e.RIGHT_STACK_OFFSET.x},e.TWEEN_TIME,Phaser.Easing.Quadratic.Out,!0,e.DELAY_TIME*r).onStart.addOnce(o.bringToTop,o)}))},e.SPRITE_COUNT=144,e.SPRITE_OPTIONS=58,e.DELAY_TIME=1e3,e.TWEEN_TIME=2e3,e.START_TIME=2e3,e.LEFT_STACK_OFFSET={x:-200,y:0},e.RIGHT_STACK_OFFSET={x:200,y:0},e}(o(0).default);e.default=a},function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=o(11),s=function(t){function e(o,r){var n=t.call(this,o,r,"UIDemoSelector")||this;return n.spritesDemoButton=new a.default(o,e.BUTTON_POSITION.x+0*e.BUTTON_SPACING.x,e.BUTTON_POSITION.y+0*e.BUTTON_SPACING.y,"Sprites Demo"),n.spritesDemoButton.events.onInputUp.add((function(){return n.game.state.start("spritesDemo")})),n.inlineImageDemoButton=new a.default(o,e.BUTTON_POSITION.x+1*e.BUTTON_SPACING.x,e.BUTTON_POSITION.y+1*e.BUTTON_SPACING.y,"Inline Image Demo"),n.inlineImageDemoButton.events.onInputUp.add((function(){return n.game.state.start("inlineImageDemo")})),n.particlesDemoButton=new a.default(o,e.BUTTON_POSITION.x+2*e.BUTTON_SPACING.x,e.BUTTON_POSITION.y+2*e.BUTTON_SPACING.y,"Fire Demo"),n.particlesDemoButton.events.onInputUp.add((function(){return n.game.state.start("particlesDemo")})),n.fullScreenButton=new a.default(o,e.BUTTON_POSITION.x+3*e.BUTTON_SPACING.x,e.BUTTON_POSITION.y+3*e.BUTTON_SPACING.y,"Fullscreen"),n.fullScreenButton.events.onInputUp.add((function(){return n.game.scale.startFullScreen(!1)})),n.addMultiple([n.spritesDemoButton,n.inlineImageDemoButton,n.particlesDemoButton,n.fullScreenButton]),n}return n(e,t),e.prototype.update=function(){this.fullScreenButton.exists=!this.game.scale.isFullScreen},e.BUTTON_POSITION={x:1140,y:50},e.BUTTON_SPACING={x:0,y:100},e}(Phaser.Group);e.default=s},function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(o,r,n,a){var s=t.call(this,o,r,n,"textButtonBackground")||this;return s.anchor.setTo(.5,.5),s.text=s.game.add.text(e.PADDING.x,e.PADDING.y,a,e.FONT),s.text.anchor.setTo(.5,.5),s.addChild(s.text),s.inputEnabled=!0,s.input.useHandCursor=!0,s}return n(e,t),e.PADDING={x:0,y:5},e.FONT={font:"Impact, Charcoal, sans-serif",fontSize:32,align:"center",fill:"#000"},e}(Phaser.Sprite);e.default=a},function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=o(0),s=o(13),i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.create=function(){t.prototype.create.call(this),this.exampleText=new s.default(this.game,this.game.world.centerX,this.game.world.centerY,"desyrelMod","",64),this.exampleText.anchor.setTo(.5,.5),this.game.add.existing(this.exampleText),this.showRandomText(),this.game.time.events.add(2e3,this.showRandomText,this).loop=!0},e.prototype.showRandomText=function(){for(var t=[Phaser.ArrayUtils.getRandomItem(e.DICE_IMAGES)],o=Math.floor(2*Math.random())+3;t.length<o;)t.push(Math.random()>.5?Phaser.ArrayUtils.getRandomItem(e.DICE_IMAGES):Phaser.ArrayUtils.getRandomItem(e.DICE_WORDS));this.exampleText.text=Phaser.ArrayUtils.shuffle(t).join(" "),this.exampleText.fontSize=Math.floor(Math.random()*(e.MAX_FONT_SIZE-e.MIN_FONT_SIZE))+e.MIN_FONT_SIZE},e.MIN_FONT_SIZE=32,e.MAX_FONT_SIZE=72,e.DICE_WORDS=["lorem","ipsum","dolor","sit","amet"],e.DICE_IMAGES=[":dollar:",":heart:"],e}(a.default);e.default=i},function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(e,o,r,n,a,s,i,u){var c=t.call(this,e,o,r,n,a,s,i)||this;return c.tokenMap=u,c}return n(e,t),e.prototype.updateText=function(){var o=this;this.tokenMap||(this.tokenMap=e.DEFAULT_TOKENS),Object.keys(this.tokenMap).forEach((function(t){o.text=o.text.replace(t,o.getCharForToken(t))})),t.prototype.updateText.call(this)},e.prototype.getCharForToken=function(t){return t in this.tokenMap?String.fromCharCode(this.tokenMap[t]):" "},e.DEFAULT_TOKENS={":dollar:":1001,":heart:":1002},e}(Phaser.BitmapText);e.default=a},function(t,e,o){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.create=function(){t.prototype.create.call(this);var e=2,o=2,r=2,n=4,a=new Phaser.Point(0,-2e3),s=this.game.add.emitter(this.game.world.centerX,this.game.world.centerY,10);s.makeParticles("fire",Array.apply(null,{length:64}).map(Number.call,Number)),s.gravity=a,s.blendMode=Phaser.blendModes.ADD,s.setAlpha(0,.8,300,Phaser.Easing.Quadratic.Out),s.setRotation(0,0),s.setScale(e,r,o,n,300,Phaser.Easing.Quadratic.Out),s.start(!1,300,50)},e}(o(0).default);e.default=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,